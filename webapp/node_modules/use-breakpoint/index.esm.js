import { useMemo, useState, useCallback, useEffect, useDebugValue } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

/**
 * Create media query objects
 * @param breakpoints the list of configured breakpoint names and their pixel values
 */
const createMediaQueries = (breakpoints) => {
    const sortedBreakpoints = Object.keys(breakpoints).sort((a, b) => breakpoints[b] - breakpoints[a]);
    return sortedBreakpoints.map((breakpoint, index) => {
        let query = '';
        const minWidth = breakpoints[breakpoint];
        const nextBreakpoint = sortedBreakpoints[index - 1];
        const maxWidth = nextBreakpoint ? breakpoints[nextBreakpoint] : undefined;
        if (minWidth >= 0) {
            query = `(min-width: ${minWidth}px)`;
        }
        if (typeof maxWidth !== 'undefined') {
            if (query) {
                query += ' and ';
            }
            query += `(max-width: ${maxWidth - 1}px)`;
        }
        const mediaQuery = {
            breakpoint,
            maxWidth,
            minWidth,
            query,
        };
        return mediaQuery;
    });
};

/**
 * A React hook to use the current responsive breakpoint.
 * Will listen to changes using the window.matchMedia API.
 * @param {*} config the list of configured breakpoint names and their pixel values
 * @param {*} [defaultBreakpoint] the optional default breakpoint
 *
 * @example
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints)
 * // undefined | { breakpoint: string; minWidth: number; maxWidth?: number }
 *
 * @example <caption>With default value</caption>
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints, 'mobile')
 * // breakpoint: { breakpoint: string; minWidth: number; maxWidth?: number }
 */
const useBreakpoint = (config, defaultBreakpoint) => {
    /** Memoize list of calculated media queries from config */
    const mediaQueries = useMemo(() => createMediaQueries(config), [config]);
    /** Get initial breakpoint value */
    const [currentBreakpoint, setCurrentBreakpoint] = useState(() => {
        if (defaultBreakpoint) {
            const _a = mediaQueries.find((query) => query.breakpoint === defaultBreakpoint), breakpoint = __rest(_a, ["query"]);
            return breakpoint;
        }
    });
    /** If there's a match, update the current breakpoint */
    const updateBreakpoint = useCallback(({ matches }, breakpoint) => {
        if (matches) {
            setCurrentBreakpoint(breakpoint);
        }
    }, []);
    /** On changes to mediaQueries, subscribe to changes using window.matchMedia */
    useEffect(() => {
        const unsubscribers = mediaQueries.map((_a) => {
            var { query } = _a, breakpoint = __rest(_a, ["query"]);
            const mediaQuery = window.matchMedia(query);
            updateBreakpoint(mediaQuery, breakpoint);
            const handleChange = () => void updateBreakpoint(mediaQuery, breakpoint);
            mediaQuery.addListener(handleChange);
            /** Map the unsubscribers array to a list of unsubscriber methods */
            return () => mediaQuery.removeListener(handleChange);
        });
        /** Return a function that when called, will call all unsubscribers */
        return () => unsubscribers.forEach((unsubscriber) => unsubscriber());
    }, [mediaQueries, updateBreakpoint]);
    /** Print a nice debug value for React Devtools */
    useDebugValue(currentBreakpoint, (c) => c
        ? `${c.breakpoint} (${c.minWidth} â‰¤ x${c.maxWidth ? ` < ${c.maxWidth}` : ''})`
        : '');
    return currentBreakpoint;
};

export default useBreakpoint;
