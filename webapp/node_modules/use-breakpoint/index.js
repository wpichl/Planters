'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

/**
 * Create media query objects
 * @param breakpoints the list of configured breakpoint names and their pixel values
 */
var createMediaQueries = function (breakpoints) {
    var sortedBreakpoints = Object.keys(breakpoints).sort(function (a, b) { return breakpoints[b] - breakpoints[a]; });
    return sortedBreakpoints.map(function (breakpoint, index) {
        var query = '';
        var minWidth = breakpoints[breakpoint];
        var nextBreakpoint = sortedBreakpoints[index - 1];
        var maxWidth = nextBreakpoint ? breakpoints[nextBreakpoint] : undefined;
        if (minWidth >= 0) {
            query = "(min-width: " + minWidth + "px)";
        }
        if (typeof maxWidth !== 'undefined') {
            if (query) {
                query += ' and ';
            }
            query += "(max-width: " + (maxWidth - 1) + "px)";
        }
        var mediaQuery = {
            breakpoint: breakpoint,
            maxWidth: maxWidth,
            minWidth: minWidth,
            query: query,
        };
        return mediaQuery;
    });
};

/**
 * A React hook to use the current responsive breakpoint.
 * Will listen to changes using the window.matchMedia API.
 * @param {*} config the list of configured breakpoint names and their pixel values
 * @param {*} [defaultBreakpoint] the optional default breakpoint
 *
 * @example
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints)
 * // undefined | { breakpoint: string; minWidth: number; maxWidth?: number }
 *
 * @example <caption>With default value</caption>
 * const breakpoints = { mobile: 0, tablet: 768, desktop: 1280 }
 * ...
 * const result = useBreakpoint(breakpoints, 'mobile')
 * // breakpoint: { breakpoint: string; minWidth: number; maxWidth?: number }
 */
var useBreakpoint = function (config, defaultBreakpoint) {
    /** Memoize list of calculated media queries from config */
    var mediaQueries = react.useMemo(function () { return createMediaQueries(config); }, [config]);
    /** Get initial breakpoint value */
    var _a = react.useState(function () {
        if (defaultBreakpoint) {
            var _a = mediaQueries.find(function (query) { return query.breakpoint === defaultBreakpoint; }); _a.query; var breakpoint = __rest(_a, ["query"]);
            return breakpoint;
        }
    }), currentBreakpoint = _a[0], setCurrentBreakpoint = _a[1];
    /** If there's a match, update the current breakpoint */
    var updateBreakpoint = react.useCallback(function (_a, breakpoint) {
        var matches = _a.matches;
        if (matches) {
            setCurrentBreakpoint(breakpoint);
        }
    }, []);
    /** On changes to mediaQueries, subscribe to changes using window.matchMedia */
    react.useEffect(function () {
        var unsubscribers = mediaQueries.map(function (_a) {
            var query = _a.query, breakpoint = __rest(_a, ["query"]);
            var mediaQuery = window.matchMedia(query);
            updateBreakpoint(mediaQuery, breakpoint);
            var handleChange = function () {
                return void updateBreakpoint(mediaQuery, breakpoint);
            };
            mediaQuery.addListener(handleChange);
            /** Map the unsubscribers array to a list of unsubscriber methods */
            return function () { return mediaQuery.removeListener(handleChange); };
        });
        /** Return a function that when called, will call all unsubscribers */
        return function () { return unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); }); };
    }, [mediaQueries, updateBreakpoint]);
    /** Print a nice debug value for React Devtools */
    react.useDebugValue(currentBreakpoint, function (c) {
        return c
            ? c.breakpoint + " (" + c.minWidth + " \u2264 x" + (c.maxWidth ? " < " + c.maxWidth : '') + ")"
            : '';
    });
    return currentBreakpoint;
};

exports.default = useBreakpoint;
